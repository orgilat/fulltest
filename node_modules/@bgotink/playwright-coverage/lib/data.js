"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachmentName = void 0;
exports.getSourceMap = getSourceMap;
exports.getSourceMaps = getSourceMaps;
exports.convertToIstanbulCoverage = convertToIstanbulCoverage;
const fs_1 = require("fs");
const istanbul_lib_coverage_1 = require("istanbul-lib-coverage");
const micromatch_1 = require("micromatch");
const path_1 = require("path");
const url_1 = require("url");
const v8_to_istanbul_1 = __importDefault(require("v8-to-istanbul"));
const convertSourceMap = __importStar(require("convert-source-map"));
exports.attachmentName = '@bgotink/playwright-coverage';
const fetch = import('node-fetch');
async function getSourceMap(url, source) {
    const inlineMap = convertSourceMap.fromSource(source);
    if (inlineMap != null) {
        return inlineMap.sourcemap;
    }
    try {
        const linkedMap = await convertSourceMap.fromMapFileSource(source, async (file) => {
            const resolved = new url_1.URL(file, url);
            switch (resolved.protocol) {
                case 'file:':
                    return await fs_1.promises.readFile(resolved, 'utf8');
                case 'data:': {
                    const comma = resolved.pathname.indexOf(',');
                    const rawData = resolved.pathname.slice(comma + 1);
                    const between = resolved.pathname
                        .slice('application/json;'.length, comma)
                        .split(';');
                    const dataString = between.includes('base64')
                        ? Buffer.from(rawData, 'base64url').toString('utf8')
                        : rawData;
                    return dataString;
                }
                default: {
                    const response = await (await fetch).default(resolved.href, {
                        method: 'GET',
                    });
                    return await response.text();
                }
            }
        });
        if (linkedMap != null) {
            return linkedMap.sourcemap;
        }
    }
    catch {
        return null;
    }
    // No source map comments, try to find an implicit sourcemap at `${url}.map`
    try {
        const response = await (await fetch).default(`${url}.map`, {
            method: 'GET',
        });
        return (await response.json());
    }
    catch {
        return undefined;
    }
}
async function getSourceMaps(sources) {
    return new Map(await Promise.all(Array.from(sources, async ([url, source]) => [url, await getSourceMap(url, source)])));
}
async function convertToIstanbulCoverage(v8Coverage, sources, sourceMaps, exclude, sourceRoot) {
    const istanbulCoverage = (0, istanbul_lib_coverage_1.createCoverageMap)({});
    for (const script of v8Coverage.result) {
        const source = sources.get(script.url);
        const sourceMap = sourceMaps.get(script.url);
        if (source == null || !(sourceMap === null || sourceMap === void 0 ? void 0 : sourceMap.mappings)) {
            continue;
        }
        function sanitizePath(path) {
            let url;
            try {
                url = new url_1.URL(path);
            }
            catch {
                url = (0, url_1.pathToFileURL)(path);
            }
            let relativePath;
            if (url.protocol.startsWith('webpack')) {
                relativePath = url.pathname.slice(1); // webpack: URLs contain relative paths
            }
            else {
                relativePath = url.pathname;
            }
            if (relativePath.includes('/webpack:/')) {
                // v8ToIstanbul breaks when the source root in the source map is set to webpack:
                // It treats the URL as a path, leading to a confusing result.
                relativePath = relativePath.slice(relativePath.indexOf('/webpack:/') + '/webpack:/'.length);
            }
            else if (path_1.posix.isAbsolute(relativePath)) {
                relativePath = path_1.posix.relative((0, url_1.pathToFileURL)(sourceRoot).pathname, path);
            }
            return relativePath;
        }
        const isExcludedCache = new Map();
        const convertor = (0, v8_to_istanbul_1.default)(
        // This path is used to resolve files, but the filename doesn't matter
        (0, path_1.join)(sourceRoot, 'unused.js'), 0, (sourceMap === null || sourceMap === void 0 ? void 0 : sourceMap.mappings)
            ? {
                source,
                sourceMap: { sourcemap: sourceMap },
            }
            : {
                source: convertSourceMap.removeMapFileComments(convertSourceMap.removeComments(source)),
            }, path => {
            let isExcluded = isExcludedCache.get(path);
            if (isExcluded != null) {
                return isExcluded;
            }
            const relativePath = sanitizePath(path);
            isExcluded =
                // ignore files outside of the root
                relativePath.startsWith('../') ||
                    // ignore webpack files
                    path.includes('/webpack:/webpack/') ||
                    relativePath === 'webpack/bootstrap' ||
                    relativePath.startsWith('webpack/runtime/') ||
                    // ignore dependencies
                    relativePath.startsWith('node_modules/') ||
                    relativePath.includes('/node_modules/') ||
                    // apply exclusions
                    (0, micromatch_1.isMatch)(relativePath, exclude);
            isExcludedCache.set(path, isExcluded);
            return isExcluded;
        });
        try {
            await convertor.load();
        }
        catch (error) {
            continue;
        }
        convertor.applyCoverage(script.functions);
        istanbulCoverage.merge(Object.fromEntries(Array.from(Object.entries(convertor.toIstanbul()), ([path, coverage]) => {
            path = sanitizePath(path);
            return [
                path,
                {
                    ...coverage,
                    path,
                },
            ];
        })));
    }
    return istanbulCoverage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWNBLG9DQStEQztBQUVELHNDQVlDO0FBRUQsOERBb0hDO0FBL01ELDJCQUFrQztBQUNsQyxpRUFBd0Q7QUFDeEQsMkNBQW1DO0FBQ25DLCtCQUFpQztBQUNqQyw2QkFBdUM7QUFDdkMsb0VBQTBDO0FBQzFDLHFFQUF1RDtBQUUxQyxRQUFBLGNBQWMsR0FBRyw4QkFBOEIsQ0FBQztBQUU3RCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFNUIsS0FBSyxVQUFVLFlBQVksQ0FDaEMsR0FBVyxFQUNYLE1BQWM7SUFFZCxNQUFNLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdEIsT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLENBQUM7UUFDSCxNQUFNLFNBQVMsR0FBRyxNQUFNLGdCQUFnQixDQUFDLGlCQUFpQixDQUN4RCxNQUFNLEVBQ04sS0FBSyxFQUFFLElBQVksRUFBbUIsRUFBRTtZQUN0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLFNBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFFcEMsUUFBUSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQzFCLEtBQUssT0FBTztvQkFDVixPQUFPLE1BQU0sYUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzdDLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDYixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDN0Ms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